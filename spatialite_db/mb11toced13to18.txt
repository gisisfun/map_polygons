DDROP TABLE IF EXISTS "mb_2011_aust_pop_";

CREATE TABLE mb_2011_aust_pop_ AS
SELECT CAST(MB_MB_CODE11 AS INT) MB.MB_CODE11 as MB_CODE11, 
CAST(MB_Counts.Persons_Usually_Resident AS FLOAT) as Persons, 
CAST(ST_Area(MB_.geometry)*12391.3 AS FLOAT) as MB_Area,
AddGeometryColumn('MB_2011_AUST', 'geometry', 4283, 'POLYGON','XY')
FROM [MB_2011_AUST] as MB
INNER JOIN [censuscounts_mb_2011_aust] as MB_Counts
ON MB.MB_CODE11=MB_Counts.Mesh_Block_ID;


DROP TABLE IF EXISTS "mb_2011_aust_pop";

CREATE TABLE mb_2011_aust_pop 
SELECT MB_MB_CODE11 as MB_CODE11, 
MB.Persons as Persons, 
CAST(ST_Area(MB.geometry)*12391.3 AS FLOAT) as MB_Area,
MB.geometry
FROM [mb_2011_aust_pop_] as MB
WHERE MB_Area IS NOT NULL;

SELECT 
MB_.MB_CODE16 as MB_CODE16, 
CAST(MB_.Persons AS FLOAT) as Persons, 
CAST((ST_Area(MB_.geometry)*12391.3) AS FLOAT) as MB_Area,
MB_.geometry
FROM MB_
WHERE MB_Area IS NOT NULL;



.mode csv
.headers on
pragma temp_store=1;
pragma temp_store_directory = '../spatialite_db';

DROP TABLE IF EXISTS "mb11toced13";

CREATE TABLE mb11toced13 AS
SELECT 
MB11.MB_CODE11,
CED13.CED_CODE13,
CED13.CED_NAME13,
((ST_Area(ST_Intersection(MB11.geometry,CED13.geometry))*12391.3)/MB11.MB_Area)*MB11.Persons as Area_Count
FROM [mb_2011_aust_pop] as MB11 
INNER JOIN [CED_2013_AUST] as CED13 
ON ST_Intersects(MB11.geometry,CED13.geometry);

.output ../csv/mb11toced13.csv

select * from "mb11toced13";

DROP TABLE IF EXISTS "mbpop11_ced13";

CREATE TABLE mbpop11_ced13 AS
SELECT 
MB_CED13.CED_CODE13 AS CED_CODE13,
MB_CED13.CED_NAME13 as CED_NAME13,
CAST(SUM(Area_Count) AS FLOAT) as Area_Total
FROM [mb11toced13] as MB_CED13 
GROUP BY CED_CODE13,CED_NAME13;

.output ../csv/mbpop11_ced13.csv

select * from "mbpop11_ced13";

.mode csv
.headers on
pragma temp_store=1;
pragma temp_store_directory = '../spatialite_db';

DROP TABLE IF EXISTS "ced13_ced18_mbpop11";

CREATE TABLE ced13_ced18_mbpop11 AS
SELECT
mb11toced13.CED_CODE13 as CED_CODE13,
mb11toced13.CED_NAME13 as CED_NAME13,
mb11toced18.CED_CODE18 AS CED_CODE18,
mb11toced18.CED_NAME18 AS CED_NAME18,
CAST(SUM(mb11toced13.Area_Count) AS FLOAT) as Olap_Count
FROM mb11toced13
INNER JOIN mb11toced18
ON mb11toced13.MB_CODE11=mb11toced18.MB_CODE11
GROUP BY CED_CODE13,CED_NAME13,CED_CODE18,CED_NAME18;

.output ../csv/ced13_ced18_mbpop11.csv

select * from "ced13_ced18_mbpop11";

.mode csv
.headers on
pragma temp_store=1;
pragma temp_store_directory = '../spatialite_db';

DROP TABLE IF EXISTS "prop_ced13_ced18_mbpop11";

CREATE TABLE prop_ced13_ced18_mbpop11 AS
SELECT
ced13_ced18_mbpop11.CED_CODE13 AS CED_CODE13,
ced13_ced18_mbpop11.CED_NAME13 AS CED_NAME13,
ced13_ced18_mbpop11.CED_CODE18 AS CED_CODE18,
ced13_ced18_mbpop11.CED_NAME18 AS CED_NAME18,
CAST((ced13_ced18_mbpop11.Olap_Count/mbpop11_ced18.Area_Total) AS FLOAT) as Prop
FROM ced13_ced18_mbpop11
INNER JOIN mbpop11_ced18
ON ced13_ced18_mbpop11.CED_CODE18=mbpop11_ced18.CED_CODE18 and prop is not NULL;

.output ../csv/prop_ced13_ced18_mbpop11.csv

select * from "prop_ced13_ced18_mbpop11";

###############################################################################################
# Total all proportions                                                                       #
# New Proportion is first proportion divided the first proportion total                       #
###############################################################################################

.mode csv
.headers on
pragma temp_store=1;
pragma temp_store_directory = '../spatialite_db';

DROP TABLE IF EXISTS "propt_sa211_ced18_mbpop11";

CREATE TABLE propt_ced13_ced18_mbpop11 AS
SELECT
prop_ced13_ced18_mbpop11.CED_CODE18 AS CED_CODE18,
prop_ced13_ced18_mbpop11.CED_NAME18 AS CED_NAME18,
CAST(SUM(prop_ced13_ced18_mbpop11.Prop) AS FLOAT) as Tot_Prop
FROM prop_ced13_ced18_mbpop11
GROUP BY CED_CODE18,CED_NAME18;

.output ../csv/propt_ced13_ced18_mbpop11.csv

select * from "propt_ced13_ced18_mbpop11";

.mode csv
.headers on
pragma temp_store=1;
pragma temp_store_directory = '../spatialite_db';

DROP TABLE IF EXISTS "conc_ced13_ced18_mbpop11";

CREATE TABLE conc_ced13_ced18_mbpop11 AS
SELECT
ced13_ced18_mbpop11.CED_CODE13 AS CED_CODE13,
ced13_ced18_mbpop11.CED_NAME13 AS CED_NAME13,
ced13_ced18_mbpop11.CED_CODE18 AS CED_CODE18,
ced13_ced18_mbpop11.CED_NAME18 AS CED_NAME18,
CAST((ced13_ced18_mbpop11.Olap_Count/mbpop11_ced18.Area_Total) AS FLOAT) as Prop
FROM ced13_ced18_mbpop11
INNER JOIN mbpop11_ced18
ON ced13_ced18_mbpop11.CED_CODE18=mbpop11_ced18.CED_CODE18 and prop is not NULL
INNER JOIN propt_ced13_ced18_mbpop11
ON propt_ced13_ced18_mbpop11.CED_CODE18=mbpop11_ced18.CED_CODE18 and prop is not NULL;

.output ../csv/conc_ced13_ced18_mbpop11.csv

select * from "conc_ced13_ced18_mbpop11";

.mode csv
.headers on
pragma temp_store=1;
pragma temp_store_directory = '../spatialite_db';



DROP TABLE IF EXISTS "mb11toced16";

CREATE TABLE mb11toced16 AS
SELECT 
MB11.MB_CODE11,
CED16.CED_CODE16,
CED16.CED_NAME16,
((ST_Area(ST_Intersection(MB11.geometry,CED16.geometry))*12391.3)/MB11.MB_Area)*MB11.Persons as Area_Count
FROM [mb_2011_aust_pop] as MB11 
INNER JOIN [CED_2016_AUST] as CED16
ON ST_Intersects(MB11.geometry,CED16.geometry);

.output ../csv/mb11toced16.csv

select * from "mb11toced16";




.mode csv
.headers on
pragma temp_store=1;
pragma temp_store_directory = '../spatialite_db';

DROP TABLE IF EXISTS "mb11tosa211";

CREATE TABLE mb11tosa211 AS
SELECT 
MB11.MB_CODE11,
SA211.SA2_MAIN11,
SA211.SA2_NAME11,
((ST_Area(ST_Intersection(MB11.geometry,SA211.geometry))*12391.3)/MB11.MB_Area)*MB11.Persons as Area_Count
FROM [mb_2011_aust_pop] as MB11 
INNER JOIN [SA2_2011_AUST] as SA211
ON ST_Intersects(MB11.geometry,SA211.geometry);

.output ../csv/mb11tosa211.csv
select * from "mb11tosa211";

DROP TABLE IF EXISTS "mbpop11_sa211";

CREATE TABLE mbpop11_sa211 AS
SELECT 
MB_SA211.SA2_MAIN11 AS SA2_MAIN11,
MB_SA211.SA2_NAME11 as SA2_NAME11,
SUM(Area_Count) as Area_Total
FROM [mb11tosa211] as MB_sa211 
GROUP BY SA2_MAIN11,SA2_NAME11;

.output ../csv/mbpop11_sa211.csv

select * from "mbpop11_sa211";

.mode csv
.headers on
pragma temp_store=1;
pragma temp_store_directory = '../spatialite_db';

DROP TABLE IF EXISTS "mb11toced18";

CREATE TABLE mb11toced18 AS
SELECT 
MB11.MB_CODE11,
CED18.CED_CODE18,
CED18.CED_NAME18,
((ST_Area(ST_Intersection(MB11.geometry,CED18.geometry))*12391.3)/MB11.MB_Area)*MB11.Persons as Area_Count
FROM [mb_2011_aust_pop] as MB11 
INNER JOIN  [CED_2018_AUST] as CED18
ON ST_Intersects(MB11.geometry,CED18.geometry);

.output ../csv/mb11toced18.csv

select * from "mb11toced18";

.mode csv
.headers on
pragma temp_store=1;
pragma temp_store_directory = '../spatialite_db';

DROP TABLE IF EXISTS "mbpop_ced13";

CREATE TABLE mbpop11_ced18 AS
SELECT 
MB_CED18.CED_CODE18 AS CED_CODE18,
MB_CED18.CED_NAME18 as CED_NAME18,
SUM(Area_Count) as Area_Total
FROM [mb11toced18] as MB_CED18 
GROUP BY CED_CODE18,CED_NAME18;

.output ../csv/mbpop11_ced18.csv

select * from "mbpop11_ced18";

.mode csv
.headers on
pragma temp_store=1;
pragma temp_store_directory = '../spatialite_db';

DROP TABLE IF EXISTS "sa211_ced18_mbpop11";

CREATE TABLE sa211_ced18_mbpop11 AS
SELECT
mb11tosa211.SA2_MAIN11 as SA2_MAIN11,
mb11tosa211.SA2_NAME11 as SA2_NAME11,
mb11toced18.CED_CODE18 AS CED_CODE18,
mb11toced18.CED_NAME18 AS CED_NAME18,
CAST(SUM(mb11tosa211.Area_Count) AS FLOAT) as Olap_Count
FROM mb11tosa211
INNER JOIN mb11toced18
ON mb11tosa211.MB_CODE11=mb11toced18.MB_CODE11
GROUP BY SA2_MAIN11,SA2_NAME11,CED_CODE18,CED_NAME18;

.output ../csv/sa211_ced18_mbpop11.csv

select * from "sa211_ced18_mbpop11";

.mode csv
.headers on
pragma temp_store=1;
pragma temp_store_directory = '../spatialite_db';

DROP TABLE IF EXISTS "prop_sa211_ced18_mbpop11";

CREATE TABLE prop_sa211_ced18_mbpop11 AS
SELECT sa211_ced18_mbpop11.CED_CODE18 AS CED_CODE18,
sa211_ced18_mbpop11.CED_NAME18 AS CED_NAME18,
CAST(SUM(sa211_ced18_mbpop11.Olap_Count/mbpop11_ced18.Area_Total) AS FLOAT) as Prop
FROM sa211_ced18_mbpop11
INNER JOIN mbpop11_ced18
ON sa211_ced18_mbpop11.CED_CODE18=mbpop11_ced18.CED_CODE18 and prop is not NULL
GROUP BY CED_CODE18,CED_NAME18;

.output ../csv/prop_sa211_ced18_mbpop11.csv

select * from "prop_sa211_ced18_mbpop11";

.mode csv
.headers on
pragma temp_store=1;
pragma temp_store_directory = '../spatialite_db';

DROP TABLE IF EXISTS "prop_sa211_ced18_mbpop11";

CREATE TABLE prop_sa211_ced18_mbpop11 AS
SELECT
prop_sa211_ced18_mbpop11.CED_CODE18 AS CED_CODE18,
prop_sa211_ced18_mbpop11.CED_NAME18 AS CED_NAME18,
CAST(SUM(prop_sa211_ced18_mbpop11.Prop) AS FLOAT) as Tot_Prop
FROM prop_sa211_ced18_mbpop11
GROUP BY CED_CODE18,CED_NAME18;

.output ../csv/prop_ced13_ced18_mbpop11.csv

select * from "prop_ced13_ced18_mbpop11";

###############################################################################################
# Total all proportions                                                                       #
# New Proportion is first proportion divided the first proportion total                       #
###############################################################################################

.mode csv
.headers on
pragma temp_store=1;
pragma temp_store_directory = '../spatialite_db';

DROP TABLE IF EXISTS "conc_ced13_ced18_mbpop11";

CREATE TABLE conc_sa211_ced18_mbpop11 AS
SELECT
sa211_ced18_mbpop11.SA2_MAIN11 as SA2_MAIN11,
sa211_ced18_mbpop11.SA2_NAME11 as SA2_NAME11,
sa211_ced18_mbpop11.CED_CODE18 AS CED_CODE18,
sa211_ced18_mbpop11.CED_NAME18 AS CED_NAME18,
CAST((sa211_ced18_mbpop11.Olap_Count/mbpop11_ced18.Area_Total) AS FLOAT) as Prop
FROM sa211_ced18_mbpop11
INNER JOIN mbpop11_ced18
ON sa211_ced18_mbpop11.CED_CODE18=mbpop11_ced18.CED_CODE18 and prop is not NULL
INNER JOIN prop_sa211_ced18_mbpop11
ON prop_sa211_ced18_mbpop11.CED_CODE18=mbpop11_ced18.CED_CODE18 and prop is not NULL;

.output ../csv/conc_sa211_ced18_mbpop11.csv

select * from "conc_sa211_ced18_mbpop11";

.quit

.SA2_MAIN11 
